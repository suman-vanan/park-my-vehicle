/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dev.sumanvanan;

import dev.sumanvanan.model.ParsedInput;
import dev.sumanvanan.model.Vehicle;
import dev.sumanvanan.model.VehicleExitInfo;
import dev.sumanvanan.model.VehicleParkTransaction;
import dev.sumanvanan.utility.InputParser;
import org.apache.commons.io.IOUtils;

import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Map;
import java.util.Optional;
import java.util.Queue;
import java.util.StringJoiner;

public class App {
    // For instructions on how to run app, see README.md
    public static void main(String[] args) {
        String filePath = getFilePath(args);

        // stop execution if exception is thrown
        try (FileInputStream fis = new FileInputStream(filePath)) {
            String inputString = IOUtils.toString(fis, StandardCharsets.UTF_8);
            ParsedInput parsedInput = InputParser.parse(inputString);

            CarParkValet valet = new CarParkValet(parsedInput.getNumOfCarParkingLots(), parsedInput.getNumOfMotorcycleParkingLots());

            Queue<VehicleParkTransaction> vehicleQueue = parsedInput.getVehicleParkTransactions();
            StringJoiner output = getOutput(vehicleQueue, valet);
            System.out.println(output);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String getFilePath(String[] args) {
        String filePath = "src/main/resources/input.txt"; // use default file if no filepath is passed as args
        if (args.length > 0) {
            filePath = args[0];
        }
        return filePath;
    }

    private static StringJoiner getOutput(Queue<VehicleParkTransaction> vehicleQueue, CarParkValet valet) {
        StringJoiner stringJoiner = new StringJoiner(System.lineSeparator());
        while (!vehicleQueue.isEmpty()) {
            stringJoiner.add(processEvent(valet, vehicleQueue.remove()));
        }
        return stringJoiner;
    }

    private static final Map<Vehicle.Type, String> vehicleTypeToOutputString = Map.of(
            Vehicle.Type.CAR, "CarLot",
            Vehicle.Type.MOTORCYCLE, "MotorcycleLot");

    private static String processEvent(CarParkValet parkValet, VehicleParkTransaction vehicleParkTransaction) {
        // only two types of events: entry & exit
        if (vehicleParkTransaction.isEntry()) {
            Optional<Integer> lotNumOptional = parkValet.admit(vehicleParkTransaction.getVehicle(), vehicleParkTransaction.getTime());
            return lotNumOptional
                    .map(integer -> "Accept " + vehicleTypeToOutputString.get(vehicleParkTransaction.getVehicle().getType()) + integer)
                    .orElse("Reject");
        } else {
            Optional<VehicleExitInfo> vehicleExitInfoOptional = parkValet.exit(vehicleParkTransaction.getVehicle(), vehicleParkTransaction.getTime());
            return vehicleExitInfoOptional
                    .map(exitInfo -> "" + vehicleTypeToOutputString.get(vehicleParkTransaction.getVehicle().getType()) + exitInfo.getReleasedLotNumber() + " " + exitInfo.getParkingFee())
                    .orElse("Error: No vehicle with vehicle number " + vehicleParkTransaction.getVehicle().getVehicleNumber() + " parked");
        }
    }
}